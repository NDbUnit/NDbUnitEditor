##|TYPE Template
##|UNIQUEID 28754f2a-da2d-45ec-87f0-2d461478f2b8
##|TITLE XSD Typed DataSet Generation Template with Annotations
##|NAMESPACE TypedDataSet
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE XML
##|COMMENTS_BEGIN
By Damon Carr - Modified from a Template by Charlie Arruda and Mike Griffin
##|COMMENTS_END
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE System.Windows.Forms.dll %>
<%#NAMESPACE System, System.Text, System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusGuiContext context) : base(context) {}

	public override void Setup()
	{
		if ( !input.Contains("lstTables") || !input.Contains("txtPath") )
		{
			ui.Title = "XSD Generation";
			ui.Width = 340;
			ui.Height = 550;
	
			// Grab default output path
			string sOutputPath = "";
			if (input.Contains("defaultOutputPath")) 
			{
				sOutputPath = input["defaultOutputPath"].ToString();
			}
	
			// Display and errors here
			GuiLabel lblError = ui.AddLabel("lblError", "", "");
			lblError.ForeColor = "Red";
	
			// Setup Dataset name.
			GuiLabel lblDatasetName = ui.AddLabel("lblDatasetName", "Enter Dataset Name:", "Enter the dataset name.");
			GuiTextBox txtDatasetName = ui.AddTextBox("txtDatasetName", "", "Enter the dataset name.");
	
			// Setup Folder selection input control.
			GuiLabel lblPath = ui.AddLabel("lblPath", "Select the output path:", "Select the output path in the field below.");
			GuiTextBox outpath = ui.AddTextBox("txtPath", sOutputPath, "Select the Output Path.");
			GuiFilePicker btnSelectPath = ui.AddFilePicker("btnPath", "Select Path", "Select the Output Path.", "txtPath", true);
	
			// Setup Database selection combobox.
			GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
			GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.");
	
			// Setup Tables selection multi-select listbox.
			GuiLabel label_t = ui.AddLabel("lblTables", "Select tables:", "Select tables from the listbox below.");
			GuiListBox lstTables = ui.AddListBox("lstTables", "Select tables.");
			lstTables.Height = 200;
	
			// Attach the onchange event to the cmbDatabases control.
			setupDatabaseDropdown(cmbDatabases, lblError);
			cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
	
			ui.ShowGui = true;
		}
		else 
		{
			ui.ShowGui = false;
		}
	}
	
	public void setupDatabaseDropdown(GuiComboBox cmbDatabases, GuiLabel lblError)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					bindTables(cmbDatabases.SelectedValue);
				}
	
				lblError.Text = "";
			}
			else
			{
				lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void bindTables(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstTables = ui["lstTables"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstTables.BindData(db.Tables);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}

	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindTables(cmbDatabases.SelectedText);
	}
	
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System, System.Text, System.Collections, Zeus, Zeus.DotNetScript %><%
/*=======================================================================
' XSD Generation Template
' Written by Charlie Arruda and Mike Griffin
'
'
' Modified by Damon Carr to Include Annotations
'
'
' Version 1.1
' Last Update - 10/7/2005
'
' Two files are created, an XSD and a XSX
'-----------------------------------------------------------------------
' You can create XML views of relational data by using the
' XML Schema Definition (XSD) language. These views can then be
' queried by using XML Path language (XPath) queries. This is similar
' to creating views by using CREATE VIEW statements and then specifying
' SQL queries against the view
'
' An XML schema describes the structure of an XML document and also
' describes the various constraints on the data in the document. When
' you specify XPath queries against the schema, the structure of the
' XML document returned is determined by the schema against which the
' XPath query is executed.
'
'
' This version includes the items needed to support annotations. To learn
' more about Annotations see: 
' http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpconusingannotationswithtypeddataset.asp
'
'-----------------------------------------------------------------------
'
' Please email us at support@mygenerationsoftware.com if you have
' suggestions or bugs to report on this template rather than just
' modifying it and reposting it.
'
'===================================================================*/
public class GeneratedTemplate : DotNetScriptTemplate
{
	public ArrayList tablenames;
	public GeneratedTemplate(ZeusContext context) : base(context) {}
	
	private string LangToXsType(string language)
	{
		string xs = language.ToLower();
		
		switch(language.ToLower())
		{
			case "bool":
				xs = "boolean";
				break;
		
			case "byte":
				xs = "unsignedByte";
				break;
				
			case "byte[]":
			case "byte()":
				xs = "base64Binary";
				break;
				
			case "datetime":
				xs = "dateTime";
				break;	

			case "guid":
				xs = "string";
				break;
				
			case "integer":
				xs = "int";
				break;				
				
			case "single":
				xs = "float";
				break;				
		}
			
		return xs;
	}
	
	private string T(string data)
	{
		return data.Trim().Replace(" ", "");
	}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		// collect needed data/objects and put them in local variables
		string databaseName = input["cmbDatabase"].ToString(); 
		tablenames = input["lstTables"] as ArrayList;	
		string DatasetName = input["txtDatasetName"].ToString();

		// Filename info
		string filepath = input["txtPath"].ToString();
		
		if(!filepath.EndsWith("\\"))
		{
			filepath += "\\";
		}
		
		string filenameXSD = filepath + DatasetName + ".xsd";	
		string filenameXSX = filepath + DatasetName + ".xsx";	

		bool IsTableSelected = false;
%><?xml version="1.0" standalone="yes"?>
<xs:schema id="<%=DatasetName%>" xmlns:codegen="urn:schemas-microsoft-com:xml-msprop" targetNamespace="http://www.tempuri.org/<%=DatasetName%>.xsd" xmlns:mstns="http://www.tempuri.org/<%=DatasetName%>.xsd" xmlns="http://www.tempuri.org/<%=DatasetName%>.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:element name="<%=DatasetName%>" msdata:IsDataSet="true">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded"><%
	  	for (int i = 0; i < tablenames.Count; i++) 	
		{
			string tablename = tablenames[i].ToString();
			ITable tableMeta = MyMeta.Databases[databaseName].Tables[tablename]; %>
		<xs:element name="<%=tablename%>" codegen:typedName="annotatedTable<%=tablename%>" codegen:typedPlural="annotatedTable<%=tablename%>Plural">
		  <xs:complexType>
			<xs:sequence><%
			for (int j = 0; j < tableMeta.Columns.Count; j++) 
			{
				IColumn column = tableMeta.Columns[j]; %>
			  <xs:element name="<%=T(column.Name)%>" type="xs:<%=LangToXsType(column.LanguageType)%>" <%
				 
				// If you have AutoIncrement on a column it can prevent it from generated the class?
				if (column.IsAutoKey) // || column.IsInPrimaryKey)
				{
					%>msdata:AutoIncrement="true" <%
				}
				
				if (column.IsAutoKey || column.IsComputed)
				{
					%>msdata:ReadOnly="true" <%
				}				
				 
				if(column.LanguageType == "Guid")
				{
					%>msdata:DataType="System.Guid, mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" <%
				}
				
				if(column.IsNullable)
				{
					%>minOccurs="0" <%				
				}
				 %>  codegen:typedName="annotated<%=T(column.Name)%>"  codegen:nullValue="_throw"  /><%
			}%>
 			</xs:sequence>
		  </xs:complexType>
		</xs:element><%
		}%>
      </xs:choice>
    </xs:complexType><%
	for (int i = 0; i < tablenames.Count; i++) 	
	{
		string tablename = tablenames[i].ToString();
		ITable tableMeta = MyMeta.Databases[databaseName].Tables[tablename];
		for (int j = 0; j < tableMeta.Columns.Count; j++) 
		{
			IColumn column = tableMeta.Columns[j];
			if (column.IsInPrimaryKey) 
			{%>
	  <xs:key name="PK_<%=tablename%>_<%=column.Name%>" msdata:PrimaryKey="true">
		<xs:selector xpath=".//mstns:<%=tablename%>" />
        <xs:field xpath="mstns:<%=column.Name%>" />
	  </xs:key><%
			}
		}
	} 

	try 
	{
		for (int i = 0; i < tablenames.Count; i++) 	
		{
			string tablename = tablenames[i].ToString();
			ITable tableMeta = MyMeta.Databases[databaseName].Tables[tablename];
			IForeignKeys FKs = tableMeta.ForeignKeys;
		
			foreach (IForeignKey fk in FKs) 
			{
				IsTableSelected = false;
				for (int z = 0; z < tablenames.Count; z++)
				{
					if (tablenames[z].ToString() == fk.PrimaryTable.Name) 
					{
						IsTableSelected = true;
					}										
				}

				if (IsTableSelected && fk.PrimaryTable.Name != tablename) 
				{%>
				<xs:keyref name="<%=tablename%>_<%=fk.PrimaryTable.Name%>_<%=fk.ForeignColumns[0].Name%>" refer="mstns:PK_<%=fk.PrimaryTable.Name%>_<%=fk.PrimaryColumns[0].Name%>"  msdata:ConstraintOnly="true" codegen:typedParent="<%=fk.PrimaryTable.Name%>" codegen:typedChildren="get<%=fk.PrimaryTable.Name%>">
					<xs:selector xpath=".//mstns:<%=tablename%>" />
					<xs:field xpath="mstns:<%=fk.ForeignColumns[0].Name%>" />
				</xs:keyref>
	<%   		}
			}
		}
	}
	catch (System.Exception ex)
	{
		throw ex;
	}	 %>
 </xs:element>
</xs:schema>
<%
	
    // CREATE AND SAVE RESOURCE FILE
	output.save(filenameXSD, "o");
	output.clear();			
%>
<?xml version="1.0" encoding="utf-8"?>
<!--This file is auto-generated by the XML Schema Designer. It holds layout information for components on the designer surface.-->
<XSDDesignerLayout layoutVersion="2" viewPortLeft="-4669" viewPortTop="-1807" zoom="80">
<%
	int top = 922;
	int left = 5000;
	int width = 500;
	int height = 500;
				
	for (int i = 0; i < tablenames.Count; i++) 	
	{
		string tablename = tablenames[i].ToString();
		if (decimal.Remainder(i,5)==0) 
		{
			top += 9000;
			left = 12000;
		} 
		else 
		{
			left += 12000;
		}
		
		ITable tableMeta = MyMeta.Databases[databaseName].Tables[tablename];

		width  = 500 + tableMeta.Columns.Count * 500;
		height = 500 + tableMeta.Columns.Count * 500;
%>
<<%=tablename%>_XmlElement left="<%=left.ToString()%>" top="<%=top.ToString()%>" width="<%=width.ToString()%>" height="<%=height.ToString()%>" selected="0" zOrder="1" index="0" expanded="1" />
</XSDDesignerLayout>
<%
	}
	output.save(filenameXSX, "o");
  }
}
%>
##|BODY_END
